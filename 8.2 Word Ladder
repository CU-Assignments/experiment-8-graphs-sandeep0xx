from collections import deque

class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: list[str]) -> int:
        wordSet = set(wordList)  # Convert wordList to a set for fast lookup
        if endWord not in wordSet:
            return 0  # If endWord is not in wordList, no transformation is possible

        queue = deque([(beginWord, 1)])  # BFS queue storing (word, transformation steps)

        while queue:
            word, steps = queue.popleft()

            if word == endWord:
                return steps  # If we reach endWord, return the number of steps

            # Try all possible one-letter transformations
            for i in range(len(word)):
                for c in 'abcdefghijklmnopqrstuvwxyz':
                    newWord = word[:i] + c + word[i+1:]
                    if newWord in wordSet:  # If it's a valid transformation
                        queue.append((newWord, steps + 1))
                        wordSet.remove(newWord)  # Remove from set to avoid revisiting

        return 0  # No path found
